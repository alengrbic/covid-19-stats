{"version":3,"sources":["components/Maps.js","components/Chart.js","components/CasesInput.js","App.js","serviceWorker.js","index.js"],"names":["Maps","state","zoom","this","props","countryName","Map","style","height","width","center","minZoom","TileLayer","attribution","url","map","el","i","radiusSize","cases","position","countryInfo","lat","long","Circle","key","_id","country","color","radius","Popup","src","flag","alt","recovered","deaths","Component","Chart","console","log","data","stats","A","active","critical","backgroundColor","paddingTop","className","fontSize","outerRadius","dataKey","name","stroke","fill","fillOpacity","CasesInput","inputValue","suggestions","handleSubmit","e","preventDefault","target","blur","handleInput","setState","value","setTimeout","forEach","countryData","total","TotalConfirmed","TotalDeaths","TotalRecovered","toLowerCase","countryChart","onSubmit","action","options","onChange","trigger","spacer","placeholder","App","handleFetch","fetch","then","res","json","catch","err","textAlign","margin","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a99f3707.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Map, TileLayer, Popup, Circle } from \"react-leaflet\";\r\n\r\nexport class Maps extends Component {\r\n  state = {\r\n    zoom: 2,\r\n  };\r\n\r\n  render() {\r\n    const position2 = [40.37767, 49.89201];\r\n\r\n    if (!this.props.countryName[0]) {\r\n      return <div>Please Wait</div>;\r\n    } else {\r\n      return (\r\n        <div>\r\n          <Map\r\n            style={{ height: \"50vh\", width: \"100%\" }}\r\n            center={position2}\r\n            zoom={this.state.zoom}\r\n            minZoom=\"2\"\r\n          >\r\n            <TileLayer\r\n              attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n              url=\"https://{s}.tile.osm.org/{z}/{x}/{y}.png\"\r\n            />\r\n\r\n            {}\r\n            {this.props.countryName.map((el, i) => {\r\n              let radiusSize = null;\r\n              if (el.cases > 200000) {\r\n                radiusSize = el.cases / 2;\r\n              } else if (el.cases < 15000) {\r\n                radiusSize = el.cases + 50000;\r\n              } else {\r\n                radiusSize = el.cases;\r\n              }\r\n              const position = [el.countryInfo.lat, el.countryInfo.long];\r\n              return (\r\n                <Circle\r\n                  key={el.countryInfo._id + el.country}\r\n                  color=\"red\"\r\n                  radius={radiusSize}\r\n                  center={position}\r\n                >\r\n                  <Popup>\r\n                    <h3>\r\n                      {\" \"}\r\n                      <img\r\n                        src={this.props.countryName[i].countryInfo.flag}\r\n                        height=\"20px\"\r\n                        width=\"30px\"\r\n                        alt=\"\"\r\n                      />{\" \"}\r\n                      {this.props.countryName[i].country}\r\n                    </h3>\r\n                    <br />\r\n                    Cases: {this.props.countryName[i].cases}\r\n                    <br />\r\n                    Recovered: {this.props.countryName[i].recovered}\r\n                    <br />\r\n                    Deceased: {this.props.countryName[i].deaths}\r\n                  </Popup>\r\n                </Circle>\r\n              );\r\n            })}\r\n          </Map>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Maps;\r\n","import React, { Component } from \"react\";\r\nimport \"../styles/Chart.css\";\r\nimport {\r\n  RadarChart,\r\n  PolarGrid,\r\n  PolarAngleAxis,\r\n  Radar,\r\n  Legend,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\n\r\nexport class Chart extends Component {\r\n  render() {\r\n    console.log(this.props.data);\r\n    const data = [\r\n      {\r\n        stats: `Cases: ${this.props.data.cases}`,\r\n        A: this.props.data.cases,\r\n      },\r\n      {\r\n        stats: `Active: ${this.props.data.active}`,\r\n        A: this.props.data.active,\r\n      },\r\n      {\r\n        stats: `Critical: ${this.props.data.critical}`,\r\n        A: this.props.data.critical,\r\n      },\r\n      {\r\n        stats: `Deceased: ${this.props.data.deaths}`,\r\n        A: this.props.data.deaths,\r\n      },\r\n      /* {\r\n        stats: \"Tests\",\r\n        A: this.props.data.tests,\r\n      }, */\r\n      {\r\n        stats: `Recovered: ${this.props.data.recovered}`,\r\n        A: this.props.data.recovered,\r\n      },\r\n    ];\r\n    return (\r\n      <div\r\n        style={{\r\n          color: \"#000\",\r\n          backgroundColor: \"#fff\",\r\n          paddingTop: \"1em\",\r\n        }}\r\n      >\r\n        <ResponsiveContainer height={300}>\r\n          <RadarChart\r\n            className=\"fnt\"\r\n            fontSize={\"0.6em\"}\r\n            outerRadius={120}\r\n            width={530}\r\n            height={1550}\r\n            data={data}\r\n          >\r\n            <PolarGrid />\r\n            <PolarAngleAxis dataKey=\"stats\" />\r\n            {/* <PolarRadiusAxis angle={30} domain={[0, 100]} /> */}\r\n            <Radar\r\n              name={this.props.data.country}\r\n              dataKey=\"A\"\r\n              stroke=\"#8884d8\"\r\n              fill=\"#8884d8\"\r\n              fillOpacity={0.6}\r\n            />\r\n            <Legend className=\"fnt2\" />\r\n          </RadarChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chart;\r\n","import React, { Component } from \"react\";\r\nimport Chart from \"./Chart\";\r\nimport \"../styles/CasesInput.css\";\r\nimport TextInput from \"react-autocomplete-input\";\r\nimport \"react-autocomplete-input/dist/bundle.css\";\r\n\r\nexport class CasesInput extends Component {\r\n  state = {\r\n    inputValue: \"\",\r\n    suggestions: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    setTimeout(() => {\r\n      this.props.data.forEach((el) => {\r\n        this.setState({ suggestions: [...this.state.suggestions, el.country] });\r\n      });\r\n    }, 1000);\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    e.target.blur();\r\n  };\r\n\r\n  handleInput = (e) => {\r\n    this.setState({ inputValue: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    let countryData = (\r\n      <div>\r\n        <div className=\"flexContent\">\r\n          <div className=\"brd\">\r\n            <h3>Worldwide</h3>\r\n          </div>\r\n          <div className=\"brd\">\r\n            <h4>Cases:</h4>\r\n            <h3>{this.props.total.TotalConfirmed}</h3>\r\n          </div>\r\n          <div className=\"brd\">\r\n            <h4>Deceased:</h4>\r\n            <h3>{this.props.total.TotalDeaths}</h3>\r\n          </div>\r\n          <div className=\"brd\">\r\n            <h4>Recovered:</h4>\r\n            <h3>{this.props.total.TotalRecovered}</h3>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n    this.props.data.forEach((el) => {\r\n      if (this.state.inputValue.toLowerCase() === el.country.toLowerCase()) {\r\n        countryData = (\r\n          <div>\r\n            <div className=\"flexContent\">\r\n              <div className=\"brd\">\r\n                <h4>Country:</h4>\r\n                <h3>{el.country}</h3>\r\n              </div>\r\n              <div className=\"brd\">\r\n                <h4>Cases:</h4>\r\n                <h3>{el.cases}</h3>\r\n              </div>\r\n              <div className=\"brd\">\r\n                <h4>Deceased:</h4>\r\n                <h3>{el.deaths}</h3>\r\n              </div>\r\n              <div className=\"brd\">\r\n                <h4>Recovered:</h4>\r\n                <h3>{el.recovered}</h3>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n    });\r\n\r\n    let countryChart = null;\r\n    this.props.data.forEach((el) => {\r\n      if (this.state.inputValue.toLowerCase() === el.country.toLowerCase()) {\r\n        countryChart = <Chart data={el} />;\r\n      }\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"main\">\r\n          <form onSubmit={this.handleSubmit} action=\"\">\r\n            {/* <input\r\n              placeholder=\"Look up by country name...\"\r\n              type=\"text\"\r\n              name=\"\"\r\n              id=\"\"\r\n              onChange={this.handleInput}\r\n            /> */}\r\n            <TextInput\r\n              Component=\"input\"\r\n              style={{ color: \"#000\" }}\r\n              options={this.state.suggestions}\r\n              onChange={(e) => {\r\n                this.setState({ inputValue: e });\r\n              }}\r\n              trigger=\"\"\r\n              spacer=\"\"\r\n              placeholder=\"Look up by country name...\"\r\n            />\r\n          </form>\r\n        </div>\r\n        {countryData}\r\n        {countryChart}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CasesInput;\r\n","import React, { Component } from \"react\";\nimport Maps from \"./components/Maps\";\nimport \"./styles/App.css\";\n\nimport CasesInput from \"./components/CasesInput\";\n\nexport class App extends Component {\n  state = {\n    data: [],\n    total: [],\n  };\n\n  componentDidMount() {\n    this.handleFetch();\n  }\n\n  handleFetch = () => {\n    fetch(\"https://corona.lmao.ninja/v2/countries\")\n      .then((res) => res.json())\n      .then((data) => this.setState({ data: data }))\n      .catch((err) => console.log(err));\n\n    fetch(\"https://api.covid19api.com/world/total\")\n      .then((res) => res.json())\n      .then((data) => this.setState({ total: data }))\n      .catch((err) => console.log(err));\n  };\n\n  render() {\n    return (\n      <div className=\"divEdit\" style={{ backgroundColor: \"#000\" }}>\n        <h1 style={{ textAlign: \"center\", color: \"white\", margin: \"0\" }}>\n          Coronavirus (Covid-19) Statistics\n        </h1>\n        <p>\n          Coronaviruses are a large family of viruses which may cause illness in\n          animals or humans. In humans, several coronaviruses are known to cause\n          respiratory infections ranging from the common cold to more severe\n          diseases such as Middle East Respiratory Syndrome (MERS) and Severe\n          Acute Respiratory Syndrome (SARS). The most recently discovered\n          coronavirus causes coronavirus disease COVID-19.\n        </p>\n        <h2>Live updates on Covid-19</h2>\n\n        <Maps countryName={this.state.data} />\n        <CasesInput data={this.state.data} total={this.state.total} />\n        {/* <p>\n          Data providers : <br /> https://corona.lmao.ninja/v2/countries <br />\n          https://api.covid19api.com/world/total\n        </p> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}